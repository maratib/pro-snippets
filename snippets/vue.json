{
  "xPRO:Vue SFC Template": {
    "prefix": "vue-template",
    "description": "Create Vue Template",
    "body": [
      "<template>",
      "\t<div>",
      "\t\t${0}",
      "\t</div>",
      "</template>",
      "",
      "<script>",
      "\texport default {",
      "\t\tname:\"${1}\",",
      "\t\tdata() {",
      "\t\t\treturn {",
      "\t\t\t\tgreeting: \"Hello\"",
      "\t\t\t\t${2}",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "</script>"
    ]
  },
  "xPRO:Vue TS Template": {
    "prefix": "vue-ts-template",
    "description": "Create TS Template",
    "body": [
      "<script lang=\"ts\">",
      "export default {",
      "\tname: '$1'",
      "};",
      "</script>",
      "<template>",
      "\t<div>$0</div>",
      "</template>"
    ]
  },
  "xPRO:Vue TS Setup Template": {
    "prefix": "vue-ts-setup-template",
    "description": "Create TS Setup Template",
    "body": [
      "<script setup lang=\"ts\">",
      "$1",
      "</script>",
      "",
      "<template>",
      "\t<div>$0</div>",
      "</template>"
    ]
  },
  "xPRO:Vue TS Props": {
    "prefix": "vue-defineProps",
    "description": "Create TS Props",
    "body": ["defineProps<{ msg?: string${0} }>();"]
  },

  "xPRO:Vue defineProps": {
    "prefix": "vue-defineProps-with-defaults",
    "description": "Vue defineProps with defaults",
    "body": [
      "withDefaults(defineProps<{ foo: string; bar: number }>(), { bar: 200 });"
    ]
  },

  "xPRO:Vue defineProps with Interface": {
    "prefix": "vue-defineProps-interface",
    "description": "Vue defineProps with defaults",
    "body": [
      "interface Props {",
      "\tfoo: string;",
      "\tbar?: number;",
      "}",
      "withDefaults(defineProps<Props>(), { bar: 300 });"
    ]
  },

  "xPRO:Vue ref Template": {
    "prefix": "vue-ref",
    "description": "Create Vue Ref",
    "body": ["import { ref } from \"vue\";", "$0const count = ref(0);"]
  },

  "xPRO:Vue props": {
    "prefix": "vue-props",
    "description": "Create Props",
    "body": [
      "props: {",
      "\tname: String,",
      "\t${1:name}: {",
      "\t\ttype: String,",
      "\t\tdefault: 'text',",
      "\t},",
      "\t$0",
      "},"
    ]
  },

  "xPRO:Vue store": {
    "prefix": "vue-store-vue2",
    "description": "Create Vuex Store for vue2",
    "body": [
      "import Vue from \"vue\"",
      "import Vuex from \"vuex\"",
      "",
      "Vue.use(Vuex)",
      "const state = {",
      "\t// single source of data",
      "}",
      "",
      "const actions = {",
      "\t// asynchronous operations",
      "}",
      "",
      "const mutations = {",
      "\t// isolated data mutations",
      "}",
      "",
      "const getters = {",
      "\t// reusable data accessors",
      "}",
      "",
      "const store = new Vuex.Store({",
      "\tstate,",
      "\tactions,",
      "\tmutations,",
      "\tgetters",
      "})",
      "",
      "export default store"
    ]
  },

  "xPRO:Vue data: function() return": {
    "prefix": "vue-data-function",
    "description": "Create Data Function",
    "body": ["data() {", "return {$1};", "},"]
  },

  "xPRO:Vue methods": {
    "prefix": "vue-methods",
    "description": "Create Methods",
    "body": ["methods: {", "\t${1:functionName}() { $0 }", "},"]
  },

  "xPRO:Vue import ... from 'vue'": {
    "prefix": "vue-import",
    "description": "import vue",
    "body": ["import $0 from 'vue'"]
  },
  "xPRO:Vue reactive": {
    "prefix": "vue-reactive",
    "description": "Create Reactive Object",
    "body": [
      "const $0obj = reactive({",
      "\tfoo: \"Foo\",",
      "\tbar: 200,",
      "});"
    ]
  },
  "xPRO:Vue readOnly": {
    "prefix": "vue-readonly",
    "description": "Create Readonly Object",
    "body": [
      "const $0obj = readonly({",
      "\tfoo: \"Foo\",",
      "\tbar: 200,",
      "});"
    ]
  },
  "xPRO:Vue setup": {
    "prefix": "vue-Setup",
    "description": "Create Setup",
    "body": ["setup() { $0 },"]
  },
  "xPRO:Vue onBeforeMount": {
    "prefix": "vue-on-beforeMount",
    "description": "Create onBeforeMount",
    "body": ["onBeforeMount(() => { $0 });"]
  },
  "xPRO:Vue onBeforeUnmount": {
    "prefix": "vue-on-beforeUnmount",
    "description": "Create onBeforeUnMount",
    "body": ["onBeforeUnmount(() => { $0 });"]
  },
  "xPRO:Vue onMount": {
    "prefix": "vue-on-mounted",
    "description": "Create onMounted",
    "body": ["onMounted(() => { $0 });"]
  },
  "xPRO:Vue onUnmounted": {
    "prefix": "vue-on-unmounted",
    "description": "Create onUnMounted",
    "body": ["onUnmounted(() => { $0 });"]
  },
  "xPRO:Vue onBeforeUpdate": {
    "prefix": "vue-on-beforeUpdate",
    "description": "Create onBeforeUpdate",
    "body": ["onBeforeUpdate(() => { $0 });"]
  },
  "xPRO:Vue onUpdated": {
    "prefix": "vue-on-updated",
    "description": "Create onUpdated",
    "body": ["onUpdated(() => { $0 });"]
  },
  "xPRO:Vue onActivated": {
    "prefix": "vue-on-activated",
    "description": "Create onActivated",
    "body": ["onActivated(() => { $0 });"]
  },
  "xPRO:Vue onDeactivated": {
    "prefix": "vue-on-deactivated",
    "description": "Create onDeactivated",
    "body": ["onDeactivated(() => { $0 });"]
  },
  "xPRO:Vue onErrorCaptured": {
    "prefix": "vue-on-errorCaptured",
    "description": "Create onErrorCaptured",
    "body": ["onErrorCaptured(() => { $0 });"]
  },
  "xPRO:Vue onRenderTracked": {
    "prefix": "vue-on-renderTracked",
    "description": "Create onRenderTracked",
    "body": ["onRenderTracked(() => { $0 });"]
  },
  "xPRO:Vue onRenderTriggered": {
    "prefix": "vue-on-renderTriggered",
    "description": "Create onRenderTriggered",
    "body": ["onRenderTriggered(() => { $0 });"]
  },
  "xPRO:Vue componentIs": {
    "prefix": "vue-ComponentIs",
    "description": "Create ComponentIs",
    "body": ["<component :is='$0'></component>"]
  }
}
